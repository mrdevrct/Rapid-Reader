// src/lib/api/httpError.ts
import { logError } from "./logger";

export interface ApiError {
  status: number;
  message: string;
  context?: string;
  raw?: any;
}

/**
 * @function handleHttpError
 * Ù‡Ù†Ø¯Ù„ Ù…Ø±Ú©Ø²ÛŒ Ø®Ø·Ø§ Ø¨Ø±Ø§ÛŒ axios ÛŒØ§ fetch.
 * Ø®Ø·Ø§ Ø±Ùˆ Ù†Ø±Ù…Ø§Ù„Ø§ÛŒØ² Ú©Ø±Ø¯Ù‡ Ùˆ Ø¯Ø± dev mode Ù„Ø§Ú¯ Ù…ÛŒâ€ŒÚ¯ÛŒØ±Ù‡.
 */
export function handleHttpError(error: any, context?: string): ApiError {
  let message = "Unexpected error occurred";
  let status = 500;

  // ðŸ§© axios error
  if (error?.response) {
    status = error.response.status;
    message =
      error.response.data?.message ||
      error.response.statusText ||
      "HTTP error occurred";
  }

  // ðŸ§© fetch error
  else if (error?.status && error?.message) {
    status = error.status;
    message = error.message;
  }

  // ðŸ§© network / unknown
  else if (error instanceof Error) {
    message = error.message;
  }

  const normalizedError: ApiError = {
    status,
    message,
    context,
    raw: error,
  };

  // ðŸš€ Log error in dev mode
  logError({
    type: "HTTP_ERROR",
    ...normalizedError,
  });

  return normalizedError;
}
